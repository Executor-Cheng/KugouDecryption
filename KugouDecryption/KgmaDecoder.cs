using SharpCompress.Compressors.Xz;
using System;
using System.IO;

namespace KugouDecryption
{
    /// <summary>
    /// 解密kgm/kgma/vpr的静态类
    /// </summary>
    public static class KgmaDecoder
    {
        /// <summary>
        /// vpr校验头部
        /// </summary>
        private static ReadOnlySpan<byte> VprHeader => new byte[16] { 0x05, 0x28, 0xBC, 0x96, 0xE9, 0xE4, 0x5A, 0x43, 0x91, 0xAA, 0xBD, 0xD0, 0x7A, 0xF5, 0x36, 0x31 };

        /// <summary>
        /// kgm(a)校验头部
        /// </summary>
        private static ReadOnlySpan<byte> KgmHeader => new byte[16] { 0x7C, 0xD5, 0x32, 0xEB, 0x86, 0x02, 0x7F, 0x4B, 0xA8, 0xAF, 0xA6, 0x8E, 0x0F, 0xFF, 0x99, 0x14 };

        /// <summary>
        /// vpr文件后期mask
        /// </summary>
        private static ReadOnlySpan<byte> MaskVpr => new byte[17] { 0x25, 0xDF, 0xE8, 0xA6, 0x75, 0x1E, 0x75, 0x0E, 0x2F, 0x80, 0xF3, 0x2D, 0xB8, 0xB6, 0xE3, 0x11, 0x00 };

        /// <summary>
        /// 先置mask
        /// </summary>
        private static ReadOnlySpan<byte> MaskV2 => new byte[]
        {
            0xB8, 0xD5, 0x3D, 0xB2, 0xE9, 0xAF, 0x78, 0x8C, 0x83, 0x33, 0x71, 0x51, 0x76, 0xA0, 0xCD, 0x37,
            0x2F, 0x3E, 0x35, 0x8D, 0xA9, 0xBE, 0x98, 0xB7, 0xE7, 0x8C, 0x22, 0xCE, 0x5A, 0x61, 0xDF, 0x68,
            0x69, 0x89, 0xFE, 0xA5, 0xB6, 0xDE, 0xA9, 0x77, 0xFC, 0xC8, 0xBD, 0xBD, 0xE5, 0x6D, 0x3E, 0x5A,
            0x36, 0xEF, 0x69, 0x4E, 0xBE, 0xE1, 0xE9, 0x66, 0x1C, 0xF3, 0xD9, 0x02, 0xB6, 0xF2, 0x12, 0x9B,
            0x44, 0xD0, 0x6F, 0xB9, 0x35, 0x89, 0xB6, 0x46, 0x6D, 0x73, 0x82, 0x06, 0x69, 0xC1, 0xED, 0xD7,
            0x85, 0xC2, 0x30, 0xDF, 0xA2, 0x62, 0xBE, 0x79, 0x2D, 0x62, 0x62, 0x3D, 0x0D, 0x7E, 0xBE, 0x48,
            0x89, 0x23, 0x02, 0xA0, 0xE4, 0xD5, 0x75, 0x51, 0x32, 0x02, 0x53, 0xFD, 0x16, 0x3A, 0x21, 0x3B,
            0x16, 0x0F, 0xC3, 0xB2, 0xBB, 0xB3, 0xE2, 0xBA, 0x3A, 0x3D, 0x13, 0xEC, 0xF6, 0x01, 0x45, 0x84,
            0xA5, 0x70, 0x0F, 0x93, 0x49, 0x0C, 0x64, 0xCD, 0x31, 0xD5, 0xCC, 0x4C, 0x07, 0x01, 0x9E, 0x00,
            0x1A, 0x23, 0x90, 0xBF, 0x88, 0x1E, 0x3B, 0xAB, 0xA6, 0x3E, 0xC4, 0x73, 0x47, 0x10, 0x7E, 0x3B,
            0x5E, 0xBC, 0xE3, 0x00, 0x84, 0xFF, 0x09, 0xD4, 0xE0, 0x89, 0x0F, 0x5B, 0x58, 0x70, 0x4F, 0xFB,
            0x65, 0xD8, 0x5C, 0x53, 0x1B, 0xD3, 0xC8, 0xC6, 0xBF, 0xEF, 0x98, 0xB0, 0x50, 0x4F, 0x0F, 0xEA,
            0xE5, 0x83, 0x58, 0x8C, 0x28, 0x2C, 0x84, 0x67, 0xCD, 0xD0, 0x9E, 0x47, 0xDB, 0x27, 0x50, 0xCA,
            0xF4, 0x63, 0x63, 0xE8, 0x97, 0x7F, 0x1B, 0x4B, 0x0C, 0xC2, 0xC1, 0x21, 0x4C, 0xCC, 0x58, 0xF5,
            0x94, 0x52, 0xA3, 0xF3, 0xD3, 0xE0, 0x68, 0xF4, 0x00, 0x23, 0xF3, 0x5E, 0x0A, 0x7B, 0x93, 0xDD,
            0xAB, 0x12, 0xB2, 0x13, 0xE8, 0x84, 0xD7, 0xA7, 0x9F, 0x0F, 0x32, 0x4C, 0x55, 0x1D, 0x04, 0x36,
            0x52, 0xDC, 0x03, 0xF3, 0xF9, 0x4E, 0x42, 0xE9, 0x3D, 0x61, 0xEF, 0x7C, 0xB6, 0xB3, 0x93, 0x50,
        };
        
        /// <summary>
        /// 将源文件数据解密为音频数据
        /// </summary>
        /// <exception cref="ArgumentNullException"/>
        /// <exception cref="NotSupportedException"/>
        /// <returns>音频数据</returns>
        public static unsafe byte[] Decode(byte[] buffer)
        {
            ReadOnlySpan<byte> span = buffer ?? throw new ArgumentNullException(nameof(buffer));
            bool vpr = span[..16].SequenceEqual(VprHeader) || (span[..16].SequenceEqual(KgmHeader) ? false : throw new ArgumentException("给定的文件格式不是kgm/kgma/vpr中的一种"));
            Span<byte> key = stackalloc byte[17];
            span[0x1c..0x2c].CopyTo(key); // 其实就是加一个0到后边去
            fixed (byte* ptrBegin = span)
            fixed (byte* maskV2Ptr = MaskV2) // 避免边界检查
            fixed (byte* keyPtr = key) // 避免边界检查
            {
                byte* ptr = ptrBegin + 16;
                int headerLength = *(int*)ptr;
#if BIGENDIAN
                headerLength = BinaryPrimitives.ReverseEndianness(headerLength);
#endif
                int length = span.Length - headerLength,
                    keyLength = (int)((uint)length >> 4) + 1;
                if (keyLength > 73155904)
                {
                    throw new NotSupportedException("源文件长度过长");
                }
                byte[] result = GC.AllocateUninitializedArray<byte>(length);
                using (MemoryStream ms = new(Properties.Resources.kgm_v2))
                using (XZStream stream = new(ms))
                {
                    stream.Read(result.AsSpan()[..keyLength]);
                }
                ptr = ptrBegin + span.Length;
                fixed (byte* resultPtrBegin = result)
                {
                    byte* resultPtrEnd = resultPtrBegin + length,
                          resultPtr = resultPtrEnd;
                    int mod17 = length % 17,
                        mod272 = length % 272;
                    for (int i = length; i != -1; i--) // 倒过来遍历, 这样子mask可以先往result里边放
                    {
                        int med8 = keyPtr[mod17] ^ *ptr--;
                        med8 ^= (med8 & 0xF) << 4;
                        int msk8 = maskV2Ptr[mod272] ^ resultPtrBegin[i >> 4];
                        msk8 ^= (msk8 & 0xF) << 4;
                        *resultPtr-- = (byte)(med8 ^ msk8); // 避免边界检查
                        mod17--;
                        mod17 += 17 & (mod17 >> 31); // -1的时候置为16
                        mod272--;
                        mod272 += 272 & (mod272 >> 31); // -1的时候置为272
                    }
                    if (vpr)
                    {
                        resultPtr = resultPtrEnd;
                        fixed (byte* maskVprPtr = MaskVpr) // 避免边界检查
                        {
                            mod17 = length % 17;
                            for (int i = 0; i < length; i++)
                            {
                                *resultPtr-- ^= maskVprPtr[mod17];
                                mod17 -= 1;
                                mod17 += 17 & (mod17 >> 31); // -1的时候置为16
                            }
                        }
                    }
                }
                return result;
            }
        }
    }
}
